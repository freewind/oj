/*
 * This code was generated by ojc.
 */
/*
 * OrderKeeperClass.oj
 *
 */
package examples.order;


import openjava.mop.*;
import openjava.ptree.ClassDeclaration;
import openjava.syntax.*;


public class OrderKeeperClass extends openjava.mop.OJClass
{

    private static final java.lang.String DEPEND = "dependsOn";

    public void translateDefinition()
        throws openjava.mop.MOPException
    {
        openjava.mop.OJClass base = getDepended();
        System.out.println( "I'm " + getName() + ".  " + "After You, " + base.getName() + "." );
        try {
            waitTranslation( base );
        } catch ( java.lang.Exception e ) {
            System.err.println( e.toString() );
        }
        System.out.println( getName() + " is finished." );
    }

    private openjava.mop.OJClass getDepended()
        throws openjava.mop.MOPException
    {
        return OJClass.forName( getSuffix( DEPEND ).toString() );
    }

    public static boolean isRegisteredKeyword( java.lang.String keyword )
    {
        return keyword.equals( DEPEND );
    }

    public static openjava.syntax.SyntaxRule getDeclSuffixRule( java.lang.String keyword )
    {
        return keyword.equals( DEPEND ) ? new openjava.syntax.TypeNameRule() : null;
    }

    public java.lang.String toString()
    {
        return super.toString() + "(mc : OrderKeeper)";
    }

    public OrderKeeperClass( openjava.mop.Environment oj_param0, openjava.mop.OJClass oj_param1, openjava.ptree.ClassDeclaration oj_param2 )
    {
        super( oj_param0, oj_param1, oj_param2 );
    }

    public OrderKeeperClass( java.lang.Class oj_param0, openjava.mop.MetaInfo oj_param1 )
    {
        super( oj_param0, oj_param1 );
    }

}
